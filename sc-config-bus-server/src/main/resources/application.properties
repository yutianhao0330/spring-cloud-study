spring.application.name=sc-config-bus-server
server.port=8898
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/


spring.cloud.config.server.git.uri=https://github.com/yutianhao0330/sc-cloud-thyu-config.git
spring.cloud.config.server.git.search-paths=projecta/configpath
spring.cloud.config.label=master
spring.cloud.config.server.git.username =
spring.cloud.config.server.git.password =
management.endpoints.web.exposure.include= bus-refresh

#启用总线技术
spring.cloud.bus.enabled = true
#追踪
spring.cloud.bus.trace.enabled = true

#kafka 的服务器地址以及端口
spring.kafka.bootstrap-servers=192.168.89.128:9092
#主题
spring.kafka.consumer.topic=topic_config
#分组
spring.kafka.consumer.group-id=streamProcesser
#earliest 当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
# latest 当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
# none topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
spring.kafka.consumer.auto-offset-reset=earliest

# 消费者 的 key 和 value 的反序列化方式，这里实际上只需要配置生产者的即可
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.ByteArraySerializer
